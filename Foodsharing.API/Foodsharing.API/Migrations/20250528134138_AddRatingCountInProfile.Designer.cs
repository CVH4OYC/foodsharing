// <auto-generated />
using System;
using Foodsharing.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foodsharing.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250528134138_AddRatingCountInProfile")]
    partial class AddRatingCountInProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foodsharing.API.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d740f5a-173e-4f1b-974d-c007a2256c37"),
                            Color = "#FFF0E6",
                            Name = "Молочные продукты"
                        },
                        new
                        {
                            Id = new Guid("3a45831f-89fa-40ce-b236-35adcde88d56"),
                            Color = "#FFD1B3",
                            Name = "Сыры",
                            ParentId = new Guid("2d740f5a-173e-4f1b-974d-c007a2256c37")
                        },
                        new
                        {
                            Id = new Guid("863bbb48-1b44-4f05-a380-8995de42b86f"),
                            Color = "#FFD1B3",
                            Name = "Сметана",
                            ParentId = new Guid("2d740f5a-173e-4f1b-974d-c007a2256c37")
                        },
                        new
                        {
                            Id = new Guid("c09a6c67-bed1-479c-8a44-6a674ebb2bfa"),
                            Color = "#FFD1B3",
                            Name = "Молоко",
                            ParentId = new Guid("2d740f5a-173e-4f1b-974d-c007a2256c37")
                        },
                        new
                        {
                            Id = new Guid("b3d5fb72-7622-4c35-be37-c537d873e640"),
                            Color = "#E6F7FF",
                            Name = "Напитки"
                        },
                        new
                        {
                            Id = new Guid("1141deac-fddb-43c5-85e3-6c5b6d7ec314"),
                            Color = "#F5F5DC",
                            Name = "Консервы"
                        },
                        new
                        {
                            Id = new Guid("7e035d5b-ec79-47a7-9b52-d287da24737b"),
                            Color = "#E6FFE6",
                            Name = "Домашняя"
                        },
                        new
                        {
                            Id = new Guid("bdd7ad45-2e8a-40b7-a712-0fafea40c718"),
                            Color = "#C2E0C2",
                            Name = "Супы",
                            ParentId = new Guid("7e035d5b-ec79-47a7-9b52-d287da24737b")
                        },
                        new
                        {
                            Id = new Guid("0ed5ccca-722e-45d5-aef0-bb195c59a710"),
                            Color = "#C2E0C2",
                            Name = "Каши",
                            ParentId = new Guid("7e035d5b-ec79-47a7-9b52-d287da24737b")
                        },
                        new
                        {
                            Id = new Guid("c5f5b7e3-7e24-4a2d-9af1-94c08bd26db5"),
                            Color = "#C2E0C2",
                            Name = "Салаты",
                            ParentId = new Guid("7e035d5b-ec79-47a7-9b52-d287da24737b")
                        },
                        new
                        {
                            Id = new Guid("4de9dca2-2b6a-4f3c-9c02-56793ac3a222"),
                            Color = "#C2E0C2",
                            Name = "Выпечка",
                            ParentId = new Guid("7e035d5b-ec79-47a7-9b52-d287da24737b")
                        },
                        new
                        {
                            Id = new Guid("42139ca4-f9fc-41b9-8a89-0a8518177279"),
                            Color = "#FFF0F5",
                            Name = "Сладкое"
                        },
                        new
                        {
                            Id = new Guid("5a7e69c0-8a42-4f21-ad5d-f793543369d4"),
                            Color = "#FAF0DC",
                            Name = "Крупы"
                        },
                        new
                        {
                            Id = new Guid("cf1fef74-cf50-49e4-b32e-b18c9e4c4567"),
                            Color = "#E6D5B8",
                            Name = "Гречка",
                            ParentId = new Guid("5a7e69c0-8a42-4f21-ad5d-f793543369d4")
                        },
                        new
                        {
                            Id = new Guid("a8e43a0e-33fc-4d91-9c84-61e6c0ae0dc5"),
                            Color = "#E6D5B8",
                            Name = "Рис",
                            ParentId = new Guid("5a7e69c0-8a42-4f21-ad5d-f793543369d4")
                        },
                        new
                        {
                            Id = new Guid("1e4f8de2-96c4-4901-9bb0-4bc9407db53b"),
                            Color = "#E6D5B8",
                            Name = "Овсянка",
                            ParentId = new Guid("5a7e69c0-8a42-4f21-ad5d-f793543369d4")
                        },
                        new
                        {
                            Id = new Guid("01917a66-9afc-4261-8a94-8cdf29d3256d"),
                            Color = "#FFF6CC",
                            Name = "Снеки"
                        },
                        new
                        {
                            Id = new Guid("93f17e2f-6e53-4034-9d48-bf4cb12dbdf7"),
                            Color = "#FFE699",
                            Name = "Чипсы",
                            ParentId = new Guid("01917a66-9afc-4261-8a94-8cdf29d3256d")
                        },
                        new
                        {
                            Id = new Guid("d1c3ab45-1997-4fc2-8ae4-278b5a19f46d"),
                            Color = "#FFE699",
                            Name = "Сухарики",
                            ParentId = new Guid("01917a66-9afc-4261-8a94-8cdf29d3256d")
                        },
                        new
                        {
                            Id = new Guid("5b55a875-9621-47a2-9cf9-187589a3a9b3"),
                            Color = "#FFE699",
                            Name = "Орехи",
                            ParentId = new Guid("01917a66-9afc-4261-8a94-8cdf29d3256d")
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Foodsharing.API.Models.FavoriteCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("FavoriteCategories");
                });

            modelBuilder.Entity("Foodsharing.API.Models.FavoriteOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("FavoriteOrganizations");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Foodsharing.API.Models.MessageStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7746ff41-8e79-4245-9cf3-6db42fa61543"),
                            Name = "Не прочитано"
                        },
                        new
                        {
                            Id = new Guid("66765c15-ceae-42d5-a719-0367316e9c80"),
                            Name = "Прочитано"
                        },
                        new
                        {
                            Id = new Guid("7212fc64-2128-4a16-a60c-c52a4fc36784"),
                            Name = "Не доставлено"
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("OrganizationFormId");

                    b.HasIndex("OrganizationStatusId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Foodsharing.API.Models.OrganizationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationFormFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationFormShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrganizationForms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fcc1133-d158-42f2-afdb-32b1818577dc"),
                            OrganizationFormFullName = "Акционерное общество",
                            OrganizationFormShortName = "АО"
                        },
                        new
                        {
                            Id = new Guid("b3e819f0-7059-4bf5-ad1a-9988fd57bf2b"),
                            OrganizationFormFullName = "Общество с ограниченной ответственностью",
                            OrganizationFormShortName = "ООО"
                        },
                        new
                        {
                            Id = new Guid("c080a543-5696-459a-a47a-77dd0713b492"),
                            OrganizationFormFullName = "Индивидуальный предприниматель",
                            OrganizationFormShortName = "ИП"
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.OrganizationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrganizationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30098c3b-c9ce-4a22-bb0f-3f853a949e1f"),
                            Name = "Не активна"
                        },
                        new
                        {
                            Id = new Guid("7aa552f1-4ea9-4191-942e-fdbeb7eaeea8"),
                            Name = "Активна"
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.PartnershipApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("StatusId");

                    b.ToTable("PartnershipApplications");
                });

            modelBuilder.Entity("Foodsharing.API.Models.PartnershipApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartnershipApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5978c5a3-7391-4edb-96eb-0d1f07b2c046"),
                            Name = "Рассматривается"
                        },
                        new
                        {
                            Id = new Guid("b8c07b15-c703-40ab-aa09-c3677108f8ea"),
                            Name = "Рассмотрено"
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.Profile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<long>("RatingCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalGiven")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalRecieved")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<Guid>("RatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RaterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("RaterId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Foodsharing.API.Models.RepresentativeOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f05800c4-9e1a-453b-8409-41d46bf7e208"),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("fc6be39a-58d5-4ab5-aa62-a20c4d28cee8"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("c898637f-1b41-48e3-8a75-5bb99a5f6f5e"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("de83b434-1710-4afa-a6bb-5069028e549c"),
                            Name = "RepresentativeOrganization"
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Foodsharing.API.Models.TransactionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfdc2504-a005-4083-825a-c70a0cb2a1e5"),
                            Name = "Отменено"
                        },
                        new
                        {
                            Id = new Guid("7c524836-ec07-49ef-b1a8-3800f56b8423"),
                            Name = "Забронировано"
                        },
                        new
                        {
                            Id = new Guid("81b33e3c-001b-4a85-9b48-e79906bcd11a"),
                            Name = "Завершено"
                        });
                });

            modelBuilder.Entity("Foodsharing.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Foodsharing.API.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Announcement", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Address", "Address")
                        .WithMany("Announcements")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.Category", "Category")
                        .WithMany("Announcements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Chat", b =>
                {
                    b.HasOne("Foodsharing.API.Models.User", "FirstUser")
                        .WithMany("Chats")
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Foodsharing.API.Models.FavoriteCategory", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "User")
                        .WithMany("FavoriteCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foodsharing.API.Models.FavoriteOrganization", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "User")
                        .WithMany("FavoriteOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Message", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.MessageStatus", "Status")
                        .WithMany("Messages")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Organization", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Address", "Address")
                        .WithOne("Organization")
                        .HasForeignKey("Foodsharing.API.Models.Organization", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.OrganizationForm", "OrganizationForm")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.OrganizationStatus", "OrganizationStatus")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("OrganizationForm");

                    b.Navigation("OrganizationStatus");
                });

            modelBuilder.Entity("Foodsharing.API.Models.PartnershipApplication", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "ReviewedBy")
                        .WithMany("Applications")
                        .HasForeignKey("ReviewedById");

                    b.HasOne("Foodsharing.API.Models.PartnershipApplicationStatus", "Status")
                        .WithMany("PartnershipApplications")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("ReviewedBy");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Profile", b =>
                {
                    b.HasOne("Foodsharing.API.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Foodsharing.API.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Rating", b =>
                {
                    b.HasOne("Foodsharing.API.Models.User", "RatedUser")
                        .WithMany()
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "Rater")
                        .WithMany("Ratings")
                        .HasForeignKey("RaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatedUser");

                    b.Navigation("Rater");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Foodsharing.API.Models.RepresentativeOrganization", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Organization", "Organization")
                        .WithMany("Representatives")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "User")
                        .WithOne("Representative")
                        .HasForeignKey("Foodsharing.API.Models.RepresentativeOrganization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Transaction", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Announcement", "Announcement")
                        .WithMany("Transactions")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "Sender")
                        .WithMany("Transactions")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.TransactionStatus", "Status")
                        .WithMany("Transactions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Foodsharing.API.Models.UserRole", b =>
                {
                    b.HasOne("Foodsharing.API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodsharing.API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Address", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Announcement", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Category", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Foodsharing.API.Models.MessageStatus", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Organization", b =>
                {
                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("Foodsharing.API.Models.OrganizationForm", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Foodsharing.API.Models.OrganizationStatus", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Foodsharing.API.Models.PartnershipApplicationStatus", b =>
                {
                    b.Navigation("PartnershipApplications");
                });

            modelBuilder.Entity("Foodsharing.API.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Foodsharing.API.Models.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Foodsharing.API.Models.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Applications");

                    b.Navigation("Chats");

                    b.Navigation("FavoriteCategories");

                    b.Navigation("FavoriteOrganizations");

                    b.Navigation("Messages");

                    b.Navigation("Profile");

                    b.Navigation("Ratings");

                    b.Navigation("Representative");

                    b.Navigation("Transactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
