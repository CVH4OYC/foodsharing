import { useEffect } from "react";
import connection, { startConnection } from "../services/signalr-chat";

type UseChatSignalRProps = {
  conversationId: string;
  currentUserId: string;
  onNewMessage: (message: any) => void;

  onMessagesRead?: (readerId: string) => void;
  onMessageStatusUpdate?: (payload: {
    chatId: string;
    messageId: string;
    newStatus: "IsDelivered" | "IsRead";
  }) => void;
  onChatListUpdate?: (updatedChat: {
    id: string;
    interlocutor: any;
    message: any;
    unreadCount: number;
  }) => void;
} | null;

export const useChatSignalR = (params: UseChatSignalRProps) => {
  useEffect(() => {
    if (!params) return;

    const {
      conversationId,
      currentUserId,
      onNewMessage,
      onMessagesRead,
      onMessageStatusUpdate,
      onChatListUpdate,
    } = params;
    let isMounted = true;
    let markAsReadTimeout: any = null;

    startConnection()
      .then(() => {
        if (!isMounted) return;

        // 1) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        connection
          .invoke("JoinChat", conversationId)
          .catch(() => console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É"));

        // 2) ReceiveMessage ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É
        connection.on("ReceiveMessage", (message: any) => {
          onNewMessage(message);
        });

        // 3) MessageStatusUpdate ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        connection.on(
          "MessageStatusUpdate",
          (payload: { chatId: string; messageId: string; newStatus: string }) => {
            onMessageStatusUpdate &&
              onMessageStatusUpdate({
                chatId: payload.chatId,
                messageId: payload.messageId,
                newStatus: payload.newStatus as any,
              });
          }
        );

        // 4) MessagesMarkedAsRead ‚Äî –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
        connection.on("MessagesMarkedAsRead", (payload: any) => {
          onMessagesRead && onMessagesRead(payload.readerId);
        });

        // 5) ChatListUpdate ‚Äî –ø—Ä–∏—à—ë–ª –∞–ø–¥–µ–π—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∞, —Å—Ç–∞—Ç—É—Å, unreadCount)
        connection.on(
          "ChatListUpdate",
          (updatedChat: {
            id: string;
            interlocutor: any;
            message: any;
            unreadCount: number;
          }) => {
            onChatListUpdate && onChatListUpdate(updatedChat);
          }
        );

        // 6) –î–µ–ª–∞–µ–º ¬´—Ç–∞–π–º–∞—É—Ç¬ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞ MarkChatAsRead
        markAsReadTimeout = setTimeout(() => {
          connection
            .invoke("MarkChatAsRead", conversationId)
            .catch(() => console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"));
        }, 500);
      })
      .catch((err) => console.error("–û—à–∏–±–∫–∞ SignalR", err));

    return () => {
      isMounted = false;
      if (markAsReadTimeout) clearTimeout(markAsReadTimeout);

      connection
        .invoke("LeaveChat", conversationId)
        .catch(() => console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç"));

      // üßº –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SignalR –≤–æ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
      connection.off("ReceiveMessage");
      connection.off("MessagesMarkedAsRead");
      connection.off("MessageStatusUpdate");
      connection.off("ChatListUpdate");
    };
  }, [params?.conversationId, params?.currentUserId]);
};
