import { useEffect } from "react";
import connection, { startConnection } from "../services/signalr-chat";

type UseChatSignalRProps = {
  conversationId: string;
  currentUserId: string;
  onNewMessage: (message: any) => void;
  onMessagesRead?: (readerId: string) => void;
} | null;

export const useChatSignalR = (params: UseChatSignalRProps) => {
  useEffect(() => {
    if (!params) return;

    const {
      conversationId,
      currentUserId,
      onNewMessage,
      onMessagesRead,
    } = params;

    let isMounted = true;
    let markAsReadTimeout: NodeJS.Timeout | null = null;

    const scheduleMarkAsRead = () => {
      if (markAsReadTimeout) clearTimeout(markAsReadTimeout);
      markAsReadTimeout = setTimeout(() => {
        console.log("üì© –û—Ç–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π");
        connection
          .invoke("MarkChatAsRead", conversationId)
          .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ MarkChatAsRead", err));
      }, 1000);
    };

    startConnection().then(() => {
      if (!isMounted) return;

      console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SignalR, —á–∞—Ç:", conversationId);

      // üßº –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      connection.off("ReceiveMessage");
      connection.off("MessagesMarkedAsRead");

      // üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ —á–∞—Ç–∞
      connection.invoke("JoinChat", conversationId).catch(console.error);

      // üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      connection.on("ReceiveMessage", (message) => {
        console.log("üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
        onNewMessage(message);
        scheduleMarkAsRead();
      });

      // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      connection.on("MessagesMarkedAsRead", (payload: any) => {
        const ChatId = payload?.ChatId;
        const ReaderId = payload?.ReaderId;
        console.log("üì© MessagesMarkedAsRead –ø—Ä–∏—à–ª–æ:", ChatId, ReaderId);

        if (
          String(ChatId) === conversationId &&
          String(ReaderId) !== currentUserId
        ) {
          onMessagesRead?.(String(ReaderId));
        }
      });
    });

    return () => {
      isMounted = false;
      if (markAsReadTimeout) clearTimeout(markAsReadTimeout);

      connection
        .invoke("LeaveChat", conversationId)
        .catch(() => console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç"));

      // üßº –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SignalR
      connection.off("ReceiveMessage");
      connection.off("MessagesMarkedAsRead");
    };
  }, [params?.conversationId, params?.currentUserId]);
};
